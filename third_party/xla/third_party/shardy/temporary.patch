diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index a6bba2e..5608118 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,4 +1,34 @@
 Auto generated patch. Do not edit or delete it, even if empty.
+diff -ruN --strip-trailing-cr a/clang/lib/AST/ItaniumMangle.cpp b/clang/lib/AST/ItaniumMangle.cpp
+--- a/clang/lib/AST/ItaniumMangle.cpp
++++ b/clang/lib/AST/ItaniumMangle.cpp
+@@ -1405,16 +1405,6 @@
+     //   - a template template parameter with arguments
+     // In all of these cases, we should have no prefix.
+     if (NestedNameSpecifier *Prefix = qualifier->getPrefix()) {
+-      if (const auto *DTST =
+-              dyn_cast<DependentTemplateSpecializationType>(type)) {
+-        Out << "srN";
+-        TemplateName Template = getASTContext().getDependentTemplateName(
+-            {Prefix, DTST->getDependentTemplateName().getName(),
+-             /*HasTemplateKeyword=*/true});
+-        mangleTemplatePrefix(Template);
+-        mangleTemplateArgs(Template, DTST->template_arguments());
+-        break;
+-      }
+       mangleUnresolvedPrefix(Prefix,
+                              /*recursive=*/true);
+     } else {
+@@ -2618,7 +2608,8 @@
+         cast<DependentTemplateSpecializationType>(Ty);
+     TemplateName Template = getASTContext().getDependentTemplateName(
+         DTST->getDependentTemplateName());
+-    mangleTemplatePrefix(Template);
++    const DependentTemplateStorage &S = DTST->getDependentTemplateName();
++    mangleSourceName(S.getName().getIdentifier());
+     mangleTemplateArgs(Template, DTST->template_arguments());
+     break;
+   }
 diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaExprCXX.cpp b/clang/lib/Sema/SemaExprCXX.cpp
 --- a/clang/lib/Sema/SemaExprCXX.cpp
 +++ b/clang/lib/Sema/SemaExprCXX.cpp
@@ -56,6 +86,30 @@ diff -ruN --strip-trailing-cr a/clang/test/CodeGenCXX/bug135668.cpp b/clang/test
 +// CHECK: ret i32 [[FIELD]]
 +// CHECK: [[LPAD]]:
 +// CHECK: call void @_ZN9TestClassdlEPv(ptr noundef [[ALLOCATION]]) #3
+diff -ruN --strip-trailing-cr a/clang/test/CodeGenCXX/mangle-template.cpp b/clang/test/CodeGenCXX/mangle-template.cpp
+--- a/clang/test/CodeGenCXX/mangle-template.cpp
++++ b/clang/test/CodeGenCXX/mangle-template.cpp
+@@ -416,3 +416,20 @@
+   template enable_if<true> raw_hash_set<int>::AbslHashValue<HashStateBase>();
+   // CHECH: @_ZN39unresolved_template_specialization_type12raw_hash_setIiE13AbslHashValueINS_13HashStateBaseEEENS_9enable_ifIXsrNT_11is_hashableIiEE5valueEEEv
+ } // namespace unresolved_template_specialization_type
++
++namespace GH133610 {
++  template <class T> struct A {
++    template <class V> struct B { int MEM; };
++  };
++
++  struct D {};
++  struct C: public A<int>::B<D> {};
++
++  template <class T, class U, class V>
++  auto k(T t, U u, V v) -> decltype (t.U::template B<V>::MEM) { return {}; }
++
++  void t() {
++    k( C(), A<int>(), D() );
++  }
++  // CHECK: @_ZN8GH1336101kINS_1CENS_1AIiEENS_1DEEEDtdtfp_sr1U1BIT1_EE3MEMET_T0_S5_
++} // namespace GH133610
 diff -ruN --strip-trailing-cr a/clang/test/SemaCXX/bug135668.cpp b/clang/test/SemaCXX/bug135668.cpp
 --- a/clang/test/SemaCXX/bug135668.cpp
 +++ b/clang/test/SemaCXX/bug135668.cpp
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 8aa3fcf..0612963 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "cbbf562d1c2a076de83d50fedfee78acfb4d8003"
-    LLVM_SHA256 = "3cc178625e6a7857f6b5b16789cedc7503c06925971183747c8420a142f3d05e"
+    LLVM_COMMIT = "0078cf79adc2f24a168bc774cba1f39dda5e3752"
+    LLVM_SHA256 = "bdceedc38bda064a253136064a1ba915c5228dfa1cea062bbc365cc8fb211f93"
 
     tf_http_archive(
         name = name,
